apiVersion: v1
kind: Namespace
metadata:
  name: estafette
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: estafette-ci-api
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: estafette-ci
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.allow-http: "false"
spec:
  tls:
  - hosts:
    - ${HOSTNAMES}
    secretName: estafette-ci-api-letsencrypt-certificate
  rules:
  - host: ${HOSTNAMES}
    http:
      paths:
      - path: /api/*
        backend:
          serviceName: estafette-ci-api
          servicePort: https
      - path: /*
        backend:
          serviceName: estafette-ci-web
          servicePort: https
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: estafette-ci-api
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/secure-backends: "true"
    estafette.io/cloudflare-dns: "true"
    estafette.io/cloudflare-proxy: "true"
    estafette.io/cloudflare-hostnames: "${HOSTNAMES}"
spec:
  tls:
  - hosts:
    - ${HOSTNAMES}
    secretName: estafette-ci-api-letsencrypt-certificate
  rules:
  - host: ${HOSTNAMES}
    http:
      paths:
      - path: /api
        backend:
          serviceName: estafette-ci-api
          servicePort: https
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: estafette-ci-api-slack
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/whitelist-source-range: "0.0.0.0/0"
spec:
  tls:
  - hosts:
    - ${INTEGRATIONS_HOSTNAME}
    secretName: estafette-ci-api-integrations-letsencrypt-certificate
  rules:
  - host: ${INTEGRATIONS_HOSTNAME}
    http:
      paths:
      - path: /api/integrations/slack/slash
        backend:
          serviceName: estafette-ci-api
          servicePort: https
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: estafette-ci-api-github
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/whitelist-source-range: "${ALLOW_INGRESS_GITHUB}"
    estafette.io/cloudflare-dns: "true"
    estafette.io/cloudflare-proxy: "true"
    estafette.io/cloudflare-hostnames: "${INTEGRATIONS_HOSTNAME}"
spec:
  tls:
  - hosts:
    - ${INTEGRATIONS_HOSTNAME}
    secretName: estafette-ci-api-integrations-letsencrypt-certificate
  rules:
  - host: ${INTEGRATIONS_HOSTNAME}
    http:
      paths:
      - path: /api/integrations/github
        backend:
          serviceName: estafette-ci-api
          servicePort: https
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: estafette-ci-api-bitbucket
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/secure-backends: "true"
    nginx.ingress.kubernetes.io/whitelist-source-range: "${ALLOW_INGRESS_BITBUCKET}"
spec:
  tls:
  - hosts:
    - ${INTEGRATIONS_HOSTNAME}
    secretName: estafette-ci-api-integrations-letsencrypt-certificate
  rules:
  - host: ${INTEGRATIONS_HOSTNAME}
    http:
      paths:
      - path: /api/integrations/bitbucket
        backend:
          serviceName: estafette-ci-api
          servicePort: https
---
apiVersion: v1
kind: Service
metadata:
  name: estafette-ci-api
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
  annotations:
    prometheus.io/probe: "true"
    prometheus.io/probe-path: "/readiness"
    service.alpha.kubernetes.io/app-protocols: '{"https":"HTTPS"}'
spec:
  type: NodePort
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: https
    protocol: TCP
  selector:
    app: estafette-ci-api
---
apiVersion: v1
kind: Secret
metadata:
  name: estafette-ci-api-letsencrypt-certificate
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
  annotations:
    estafette.io/letsencrypt-certificate: "true"
    estafette.io/letsencrypt-certificate-hostnames: "${HOSTNAMES}"
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: estafette-ci-api-integrations-letsencrypt-certificate
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
  annotations:
    estafette.io/letsencrypt-certificate: "true"
    estafette.io/letsencrypt-certificate-hostnames: "${INTEGRATIONS_HOSTNAME}"
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: estafette-ci-api-github-app-key
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
type: Opaque
data:
  private-key.pem: ${GITHUB_APP_PRIVATE_KEY}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: estafette-ci-api-config
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
data:
  config.yaml: |-
    integrations:
      github:
        privateKeyPath: /github-app-key/private-key.pem
        appID: ${GITHUB_APP_ID}
        clientID: ${GITHUB_APP_OAUTH_CLIENT_ID}
        clientSecret: ${GITHUB_APP_OAUTH_CLIENT_SECRET}
        webhookSecret: ${GITHUB_WEBHOOK_SECRET}
        eventChannelBufferSize: 100
        maxWorkers: 5

      bitbucket:
        apiKey: ${BITBUCKET_API_KEY}
        appOAuthKey: ${BITBUCKET_APP_OAUTH_KEY}
        appOAuthSecret: ${BITBUCKET_APP_OAUTH_SECRET}
        eventChannelBufferSize: 100
        maxWorkers: 5

      slack:
        clientID: ${SLACK_APP_CLIENT_ID}
        clientSecret: ${SLACK_APP_CLIENT_SECRET}
        appVerificationToken: ${SLACK_APP_VERIFICATION_TOKEN}
        appOAuthAccessToken: ${SLACK_APP_OAUTH_ACCESS_TOKEN}
        eventChannelBufferSize: 100
        maxWorkers: 5

    apiServer:
      baseURL: https://${HOSTNAMES}/
      serviceURL: http://estafette-ci-api/
      apiKey: ${ESTAFETTE_CI_API_KEY}
      eventChannelBufferSize: 100
      maxWorkers: 5

    database:
      databaseName: ${COCKROACH_DATABASE}
      host: ${COCKROACH_HOST}
      insecure: ${COCKROACH_INSECURE}
      certificateDir: ${COCKROACH_CERTS_DIR}
      port: ${COCKROACH_PORT}
      user: ${COCKROACH_USER}
      password: ${COCKROACH_PASSWORD}

    privateContainerRegistries:
      - server: gcr.io
        username: _json_key
        password: ${GCR_IO_PASSWORD}
      - server: eu.gcr.io
        username: _json_key
        password: ${GCR_IO_PASSWORD}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: estafette-ci-api
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: estafette-ci-api
  template:
    metadata:
      labels:
        app: estafette-ci-api
        team: tooling
        version: ${VERSION}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9001"
        prometheus.io/scrape-nginx-sidecar: "true"
    spec:
      serviceAccount: estafette-ci-api
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - estafette-ci-api
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 10
            preference:
              matchExpressions:
              - key: cloud.google.com/gke-preemptible
                operator: In
                values:
                - "true"
      containers:
      - name: estafette-ci-api
        image: estafette/estafette-ci-api:${GO_PIPELINE_LABEL}
        imagePullPolicy: Always
        resources:
          requests:
            cpu: ${CPU_REQUEST}
            memory: ${MEMORY_REQUEST}
          limits:
            cpu: ${CPU_LIMIT}
            memory: ${MEMORY_LIMIT}
        env:
        - name: "SECRET_DECRYPTION_KEY"
          value: "${SECRET_DECRYPTION_KEY}"
        ports:
        - name: api
          containerPort: 5000
        - name: prometheus
          containerPort: 9001
        volumeMounts:
        - name: github-app-key
          mountPath: /github-app-key
        - name: estafette-ci-api-config
          mountPath: /config
        livenessProbe:
          httpGet:
            path: /liveness
            port: api
          initialDelaySeconds: 30
          timeoutSeconds: 1
      - name: estafette-ci-api-openresty
        image: estafette/openresty-sidecar:1.13.6.1-alpine
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 150m
            memory: 150Mi
          requests:
            cpu: 50m
            memory: 50Mi
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: nginx-liveness
          containerPort: 82
        - name: nginx-readiness
          containerPort: 81
        - name: nginx-prom
          containerPort: 9101
        env:
        - name: "OFFLOAD_TO_HOST"
          value: "localhost"
        - name: "OFFLOAD_TO_PORT"
          value: "5000"
        - name: "SERVICE_NAME"
          value: "estafette-ci-api"
        - name: "NAMESPACE"
          value: "estafette"
        - name: "HEALT_CHECK_PATH"
          value: "/readiness"
        volumeMounts:
        - name: ssl-certificate
          mountPath: /etc/ssl/private
        livenessProbe:
          httpGet:
            path: /liveness
            port: nginx-liveness
          initialDelaySeconds: 15
        readinessProbe:
          httpGet:
            path: /readiness
            port: https
            scheme: HTTPS
      volumes:
      - name: ssl-certificate
        secret:
          secretName: estafette-ci-api-letsencrypt-certificate
      - name: github-app-key
        secret:
          secretName: estafette-ci-api-github-app-key
      - name: estafette-ci-api-config
        configMap:
          name: estafette-ci-api-config
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: estafette-ci-api
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: estafette-ci-api
  minReplicas: 3
  maxReplicas: ${MAX_PODS}
  targetCPUUtilizationPercentage: 80
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: estafette-ci-api
  namespace: estafette
  labels:
    app: estafette-ci-api
    team: tooling
spec:
  selector:
    matchLabels:
      app: estafette-ci-api
  minAvailable: 2
